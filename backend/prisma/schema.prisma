generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  SUPERADMIN
  MANAGER
  SUPPORT
}

enum Status {
  ACTIVE
  SUSPENDED
  DELETED
}

model Admin {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  phoneNumber String?
  avatarUrl   String?
  role        Role      @default(SUPERADMIN)
  status      Status    @default(ACTIVE)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // âœ… Only one definition for customers
  customers User[] @relation("AdminUsers")

  // Relations
  products      Product[]
  orders        Order[]
  inquiries     Inquiry[]
  inventoryLogs InventoryLog[]
  reports       Report[]
  settings      Setting[]
  invoices      Invoice[]
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  phone       String?
  avatarUrl   String?
  address     String?
  preferences Json?
  createdAt   DateTime @default(now())
  adminId     Int?
  admin       Admin?   @relation("AdminUsers", fields: [adminId], references: [id])

  // Relations
  orders    Order[]
  cart      Cart?
  reviews   Review[]
  wishlist  Wishlist?
  discounts Discount[]
}

model Discount {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  percentage Float
  validTill  DateTime
  createdAt  DateTime @default(now())

  // Relations
  users  User[]
  orders Order[]
}


model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  description String?
  imageUrl    String?
  createdBy   Admin    @relation(fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime @default(now())

  // Relations
  orderItems OrderItem[]
  reviews    Review[]
  wishlists  Wishlist[]
  cartItems  CartItem[]
}

model Order {
  id         Int       @id @default(autoincrement())
  status     String
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  assignedTo Admin?    @relation(fields: [adminId], references: [id])
  adminId    Int?
  discount   Discount? @relation(fields: [discountId], references: [id])
  discountId Int?
  createdAt  DateTime  @default(now())

  // Relations
  items OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Wishlist {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [userId], references: [id])
  userId   Int       @unique
  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}


model Inquiry {
  id         Int      @id @default(autoincrement())
  message    String
  assignedTo Admin?   @relation(fields: [adminId], references: [id])
  adminId    Int?
  createdAt  DateTime @default(now())
}

model InventoryLog {
  id        Int      @id @default(autoincrement())
  productId Int
  change    Int
  reason    String
  admin     Admin    @relation(fields: [adminId], references: [id])
  adminId   Int
  createdAt DateTime @default(now())
}

model Report {
  id          Int      @id @default(autoincrement())
  title       String
  generatedBy Admin    @relation(fields: [adminId], references: [id])
  adminId     Int
  createdAt   DateTime @default(now())
}

model Setting {
  id      Int    @id @default(autoincrement())
  key     String
  value   String
  admin   Admin? @relation(fields: [adminId], references: [id])
  adminId Int?
}

model Invoice {
  id          Int      @id @default(autoincrement())
  orderId     Int
  pdfUrl      String
  generatedBy Admin    @relation(fields: [adminId], references: [id])
  adminId     Int
  createdAt   DateTime @default(now())
}
