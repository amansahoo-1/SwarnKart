generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "foreignKeys"
}

model Admin {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  phoneNumber   String?
  avatarUrl     String?
  role          Role           @default(ADMIN)
  status        Status         @default(ACTIVE)
  lastLoginAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  inquiries     Inquiry[]
  inventoryLogs InventoryLog[]
  invoices      Invoice[]
  orders        Order[]
  products      Product[]
  reports       Report[]
  settings      Setting[]
  customers     User[]
}

model User {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  password    String
  phone       String?
  avatarUrl   String?
  address     String?
  preferences Json?
  createdAt   DateTime   @default(now())

  // Optional admin reference
  admin       Admin?     @relation(fields: [adminId], references: [id])
  adminId     Int?

  cart        Cart?
  orders      Order[]
  reviews     Review[]
  wishlist    Wishlist?
  discounts   Discount[]
}


model Discount {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  percentage Float
  validTill  DateTime
  createdAt  DateTime @default(now())
  orders     Order[]
  users      User[]
}

model Product {
  id                Int            @id @default(autoincrement())
  name              String
  price             Float
  description       String?
  imageUrl          String?
  createdAt         DateTime       @default(now())
  admin             Admin          @relation(fields: [adminId], references: [id])
  adminId           Int
  cartItems         CartItem[]
  InventoryLog      InventoryLog[]
  orderItems        OrderItem[]
  reviews           Review[]
  wishlistItems     WishlistItem[]
}

model Order {
  id         Int         @id @default(autoincrement())
  status     OrderStatus @default(PENDING) // Changed from String to OrderStatus
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  admin      Admin       @relation(fields: [adminId], references: [id])
  adminId    Int
  discount   Discount?   @relation(fields: [discountId], references: [id])
  discountId Int?
  createdAt  DateTime    @default(now())
  items      OrderItem[]
  Invoice    Invoice[]

  @@index([status]) // Adds index for faster status-based queries
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  price     Float
}

model Cart {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  updatedAt DateTime @updatedAt
  items     CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
}

model Wishlist {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int            @unique
  wishlistItems WishlistItem[]
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  addedAt    DateTime @default(now())

  @@unique([wishlistId, productId])
  @@index([productId])
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Inquiry {
  id         Int      @id @default(autoincrement())
  message    String
  admin      Admin?   @relation(fields: [adminId], references: [id])
  adminId    Int?
  createdAt  DateTime @default(now())
}

model InventoryLog {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  change    Int
  reason    String
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId   Int
  createdAt DateTime @default(now())
}

model Report {
  id          Int      @id @default(autoincrement())
  title       String
  admin       Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId     Int
  createdAt   DateTime @default(now())
}

model Setting {
  id      Int    @id @default(autoincrement())
  key     String
  value   String
  admin   Admin? @relation(fields: [adminId], references: [id])
  adminId Int?
}

model Invoice {
  id          Int      @id @default(autoincrement())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     Int
  pdfUrl      String
  admin       Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId     Int
  createdAt   DateTime @default(now())
}

enum Role {
  SUPERADMIN
  ADMIN
}

enum Status {
  ACTIVE
  SUSPENDED
  DELETED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
